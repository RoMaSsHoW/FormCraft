// <auto-generated />
using System;
using FormCraft.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormCraft.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(FormCraftDbContext))]
    [Migration("20250712144621_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer", (string)null);

                    b.HasDiscriminator<string>("discriminator").HasValue("Answer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_public");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("topic_name");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.HasIndex("TopicName");

                    b.ToTable("form", (string)null);
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid")
                        .HasColumnName("form_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.ValueObjects.FormTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid")
                        .HasColumnName("form_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("TagId");

                    b.ToTable("form_tag", (string)null);
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.ValueObjects.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.ValueObjects.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("topic", (string)null);
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenLastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_last_updated");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Answers.BooleanAnswer", b =>
                {
                    b.HasBaseType("FormCraft.Domain.Aggregates.FormAggregate.Answer");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean")
                        .HasColumnName("boolean_value");

                    b.HasDiscriminator().HasValue("Boolean");
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Answers.NumberAnswer", b =>
                {
                    b.HasBaseType("FormCraft.Domain.Aggregates.FormAggregate.Answer");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("number_value");

                    b.HasDiscriminator().HasValue("Number");
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Answers.TextAnswer", b =>
                {
                    b.HasBaseType("FormCraft.Domain.Aggregates.FormAggregate.Answer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text_value");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Answer", b =>
                {
                    b.HasOne("FormCraft.Domain.Aggregates.FormAggregate.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Question", b =>
                {
                    b.HasOne("FormCraft.Domain.Aggregates.FormAggregate.Form", null)
                        .WithMany("Questions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.ValueObjects.FormTag", b =>
                {
                    b.HasOne("FormCraft.Domain.Aggregates.FormAggregate.Form", null)
                        .WithMany("Tags")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormCraft.Domain.Aggregates.FormAggregate.ValueObjects.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.OwnsOne("FormCraft.Domain.Aggregates.UserAggregate.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("EmailAddress")
                                .IsUnique();

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("FormCraft.Domain.Aggregates.UserAggregate.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("password_hash");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Form", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FormCraft.Domain.Aggregates.FormAggregate.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
